zzz () { grep -i -n "$1" ~/.bashrc ~/.bash_aliases; } 				#Search thru bashrc
mkdircd () { mkdir -p -v $1; cd $1 ;}				#Make new folder and cd into it, in one step

x0s() { DISPLAY=:0.0 $1 ;} # display $1 in X server 0 screen 1
x1s() { DISPLAY=:0.1 $1 ;} # display $1 in X server 0 screen 1


netinfo ()							#Shows ip/mac/router address...
{
	echo "--------------- Network Information ---------------"
	/sbin/ifconfig | awk /'inet addr/ {print $2}'
	/sbin/ifconfig | awk /'Bcast/ {print $3}'
	/sbin/ifconfig | awk /'inet addr/ {print $4}'
	/sbin/ifconfig | awk /'HWaddr/ {print $4,$5}'
    echo Current IP Address: $(curl -s http://checkip.dyndns.org/ | grep -o "[[:digit:].]\+")
    echo "---------------------------------------------------"
}

down4me() { curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g' ; }	#Check if a domain is down

#Easy Extract, to be fixed cbz into dir, cbt,cb7
extract		()	
{
			  if [ -f $1 ] ; then
      				case $1 in
          			*.tar.bz2)   tar xvjf $1    ;;
          			*.tar.gz)    tar xvzf $1    ;;
          			*.bz2)       bunzip2 $1     ;;
          			*.rar)       rar x $1       ;;
          			*.cbr)       rar x -ad $1   ;;
          			*.gz)        gunzip $1      ;;
          			*.tar)       tar xvf $1     ;;
          			*.cbt)       tar xvf $1     ;;
          			*.tbz2)      tar xvjf $1    ;;
          			*.tgz)       tar xvzf $1    ;;
          			*.zip)       unzip $1       ;;
          			*.cbz)       unzip $1       ;;
          			*.Z)         uncompress $1  ;;
          			*.7z)        7z x $1        ;;
          			*.cb7)       7z x $1        ;;
          			*)           echo "don't know how to extract '$1'..." ;;
      			esac
  			else
      			echo "'$1' is not a valid file!"
  			fi
}

# Creates an archive from given directory
mktar() { tar cvf  "${1%%/}.tar"     "${1%%/}/"; }
mktgz() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }
mktbz() { tar cvjf "${1%%/}.tar.bz2" "${1%%/}/"; }

# look in WordNet and Webster
dic()	{ curl dict://dict.org/d:${1}:wn; }
wd()	{ curl dict://dict.org/d:${1}:web1913; }
# find matches of $1, with optional strat $2 and optional db $3
ref ()  {
    if [[ -z $3 ]]; then
        curl dict://dict.org/m:${1}:english:${2};
    else
        curl dict://dict.org/m:${1}:${3}:${2};
    fi
}

# define $1 using optional db of $2
def ()  { curl dict://dict.org/d:${1}:${2} ;}

pggg () {
    if pgrep -f $@ > /dev/null;
    then
        pgrep -f $@ | xargs ps -o user,pid,stat,rss,vsz,pcpu,args \
                               --sort -pcpu,-rss;
    else 
        exit 1;
    fi
}

goo () { url=$(echo "http://www.google.com/search?hl=en&q=$@" | sed 's/ /+/g'); $BROWSER $url; }

yt  () { url=$(echo "http://www.youtube.com/results?search_query=$@&page={startPage?}&utm_source=opensearch" | sed 's/ /+/g'); $BROWSER $url; }

imdb() { url=$(echo "http://www.imdb.com/find?s=all&q=$@" | sed 's/ /+/g'); $BROWSER $url; }

ff()   { find . -name $@ -print; }

function    rmd              { rm -fr $@; }

function    osr              { shutdown -r now; }
function    osh              { shutdown -h now; }

function    mfloppy          { mount /dev/fd0 /mnt/floppy; }
function    umfloppy         { umount /mnt/floppy; }

function    mdvd             { mount -t iso9660 -o ro /dev/dvd /mnt/dvd; }
function    umdvd            { umount /mnt/dvd; }

function    mcdrom           { mount -t iso9660 -o ro /dev/cdrom /mnt/cdrom; }
function    umcdrom          { umount /mnt/cdrom; }

function    psa              { ps aux $@; }
function    psu              { ps  ux $@; }

function    dub              { du -sclb $@; }
function    duk              { du -sclk $@; }
function    dum              { du -sclm $@; }

function    dfk              { df -PTak $@; }
function    dfm              { df -PTam $@; }
function    dfh              { df -PTah $@; }
function    dfi              { df -PTai $@; }

#http://superuser.com/questions/47192/google-search-from-linux-terminal
gaga() {
    search=""
    echo "$1"
    for term in $*; do
        search="$search%20$term"
    done
    xdg-open "http://www.google.com/search?q=$search"
}

##################################################
# Search IMDB.COM				 #
##################################################

function imdb()
{
${BROWSER} "http://www.imdb.com/find?s=all&q="${@}"&x=0&y=0" &
}

###### shows various info on running activities
# copyright 2007 - 2010 Christopher Bratusek
function treeps() {
	ps f -u $USER -o command,pid,%cpu,%mem,time,etime,tty | \
		awk 'NR <= 1 {print;next} !/awk/ && $0~var' var=${1:-".*"}
}

function system_infos()
# copyright 2007 - 2010 Christopher Bratusek
{
	case $1 in
		*cpu)
			echo -e "${ewhite}CPU:\n"
			echo -e "${eorange}Model:${eiceblue} $(grep "model name" /proc/cpuinfo | sed -e 's/.*: //g')"
			echo -e "${eorange}MHz  :${eiceblue} $(grep "cpu MHz" /proc/cpuinfo | sed -e 's/.*: //g')\n"
		;;
		*kernel)
			echo -e "${ewhite}Kernel:\n"
			echo -e "${eorange}Release:${eiceblue} $(uname -r)"
			echo -e "${eorange}Version:${eiceblue} $(uname -v)"
			echo -e "${eorange}Machine:${eiceblue} $(uname -m)\n"
		;;
		*mem | *ram)
			echo -e "${ewhite}RAM:\n"
			echo -e "${eorange}Total:${eiceblue} $(((`showmem --free`) + (`showmem --used`))) MB"
			echo -e "${eorange}Free :${eiceblue} $(showmem --free) MB"
			echo -e "${eorange}Used :${eiceblue} $(showmem --used) MB\n"
		;;
		*partitions)
			echo -e "${ewhite}Partitions:${eorange}\n"
			echo -e "major minor blocks device-node ${eiceblue}\
			\n$(cat /proc/partitions | sed -e '1,2d')" | column -t
			echo ""
		;;
		*pci)
			check_opt lspci systeminfos::pci
			if [[ $? != "1" ]]; then
				echo -e "${ewhite}PCI Devices:\n${eiceblue}"
				lspci -vkmm
				echo ""
			fi
		;;
		*usb)
			check_opt lsusb systeminfos::usb
			if [[ $? != "1" ]]; then
				echo -e "${ewhite}USB Devices:\n${eiceblue}"
				lsusb -v
				echo ""
			fi
		;;
		*mounts)
			echo -e "${ewhite}Mounts:\n${eorange}\
			\ndevice-node on mount-point type filesystem options\n" ${eiceblue} "\n\n$(mount)" | column -t
			echo ""
		;;
		*bios)
			check_opt dmidecode systeminfos::bios
			if [[ $? != "1" && $EUID == 0 ]]; then
				echo -e "${ewhite}SMBIOS/DMI Infos:${eiceblue}\n"
				dmidecode -q
			fi
		;;
		*all)
			system_infos_cpu
			system_infos_kernel
			system_infos_memory
			system_infos_partitions
			# system_infos_pci
			# system_infos_usb
			system_infos_mounts
			# system_infos_bios
		;;
		*)
			echo -e "\n${ewhite}Usage:\n"
			echo -e "${eorange}system_infos ${ewhite}|${egreen} --cpu\t\t${eiceblue}[Display CPU Model and Freq]\
			\n${eorange}system_infos ${ewhite}|${egreen} --kernel\t${eiceblue} 	[Display Kernel Version, Release and Machine]\
			\n${eorange}system_infos ${ewhite}|${egreen} --memory\t${eiceblue} 	[Display Total, Free and Used RAM]\
			\n${eorange}system_infos ${ewhite}|${egreen} --partitions\t${eiceblue}[Display Major, Minor, Blocks and Node for all Paritions]\
			\n${eorange}system_infos ${ewhite}|${egreen} --pci\t\t${eiceblue}[Display Infos about all PCI Devices (and their kernel-module)]\
			\n${eorange}system_infos ${ewhite}|${egreen} --usb\t\t${eiceblue}[Display Infos about all USB Devices (and their kernel-module)]\
			\n${eorange}system_infos ${ewhite}|${egreen} --bios\t${eiceblue} 	[Display SMBIOS DMI Infos]\
			\n${eorange}system_infos ${ewhite}|${egreen} --mounts\t${eiceblue} 	[Display all mounted devices]\n"
			tput sgr0
		;;
	esac
}

##################################################
# Find all bash functions in a file		 #
##################################################

###### finds all functions defined in any shell script secified, including .bashrc
function functions() { read -p "File name> "; sort -d $REPLY | grep "(){" | sed -e 's/(){//g' | less; }

