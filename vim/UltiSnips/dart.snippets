snippet stless "Creat a stateless widget"
import 'package:flutter/material.dart';

class ${1:name} extends StatelessWidget {
	const ${1:name}({Key key}): super(key: key);

	@override
	Widget build(BuildContext context) {
		return Container(
			child: ${2:child},
		);
	}
}
endsnippet

snippet stfull "Create statefull widget"
import 'package:flutter/material.dart';

class ${1:name} extends StatefulWidget {
	${1:name}({Key key}) : super(key: key);

	@override
	_${1:name}State createState() => _${1:name}State();
}

class _${1:name}State extends State<${1:name}> {

	@override
	Widget build(BuildContext context) {
		return Container(
			child: ${2:child},
		);
	}
}
endsnippet

snippet build "Describes the part of the user interface represented by this widget"
@override
Widget build(BuildContext context) {
		return Container(
			child: ${1:child},
		);
}
endsnippet

snippet custPainter "Used for creating custom paint"
class ${1:name}Painter extends CustomPainter {

	@override
	void paint(Canvas canvas, Size size) {
	}

	@override
	bool shouldRepaint(${1:name}Painter oldDelegate) => false;

	@override
	bool shouldRebuildSemantics(${1:name}Painter oldDelegate) => false;
}
endsnippet

snippet custClipper "Used for creating custom shapes"
class ${1:name}Clipper extends CustomClipper<Path> {

	@override
	Path getClip(Size size) {
	}

	@override
	bool shouldReclip(CustomClipper<Path> oldClipper) => false;
}
endsnippet

snippet setState "Used for changing StatefulWidget widget state."
void setState() { 
	$1
}
endsnippet

snippet initState "Called when this object is inserted into the tree. The framework will call this method exactly once for each State object it creates."
@override  	
void initState() { 
	super.initState();
	$1
}
endsnippet

snippet dispose  "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again."
@override
void dispose() { 
	$1
	super.dispose();
}
endsnippet

snippet reassemble  "Called whenever the application is reassembled during debugging, for example during hot reload."
@override
void reassemble(){
	super.reassemble();
	$1
}
endsnippet

snippet didChangeD "Called when a dependency of this State object changes"
@override
void didChangeDependencies() {
	super.didChangeDependencies();
	$1
}
endsnippet

snippet didUpdateW "Called whenever the widget configuration changes."
@override
void didUpdateWidget (${2:type} ${3:oldWidget}) {

	super.didUpdateWidget(${3:oldWidget});
	$1
}
endsnippet

snippet listViewB "Creates a scrollable, linear array of widgets that are created on demand.Providing a non-null `itemCount` improves the ability of the [ListView] to estimate the maximum scroll extent."
ListView.builder(
	itemCount: ${1:1},
	itemBuilder: (BuildContext context, int index) {
		return $2;
	},
),
endsnippet

snippet custScrollV "Creates a `ScrollView` that creates custom scroll effects using slivers. If the `primary` argument is true, the `controller` must be null."
CustomScrollView(
	slivers: <Widget>[
		$1
	],
),
endsnippet

snippet streamBldr "Creates a new `StreamBuilder` that builds itself based on the latest snapshot of interaction with the specified `stream`"
	StreamBuilder(
		stream: ${1:stream} ,
		initialData: ${2:initialData} ,
		builder: (BuildContext context, AsyncSnapshot snapshot){
			return Container(
				child: ${3:child},
			);
		},
	),
endsnippet

snippet animatedBldr "Creates an Animated Builder. The widget specified to `child` is passed to the `builder` "
AnimatedBuilder(
	animation: ${1:animation},
	child: ${2:child},
	builder: (BuildContext context, Widget child) {
		return ${3:};
	},
),
endsnippet

snippet statefulBldr "Creates a widget that both has state and delegates its build to a callback. Useful for rebuilding specific sections of the widget tree."
StatefulBuilder(
	builder: (BuildContext context, setState) {
		return ${0:};
	},
),
endsnippet

snippet orientationBldr "Creates a builder which allows for the orientation of the device to be specified and referenced"
OrientationBuilder(
	builder: (BuildContext context, Orientation orientation) {
		return Container(
			child: ${3:child},
		);
	},
),
endsnippet

snippet layoutBldr "Similar to the Builder widget except that the framework calls the builder function at layout time and provides the parent widget's constraints."
LayoutBuilder(
	builder: (BuildContext context, BoxConstraints constraints) {
		return ${0:};
	},
),
endsnippet

snippet singleChildSV "Creates a scroll view with a single child"
SingleChildScrollView(
	controller: ${1:controller,}
	child: Column(
		${0:}
	),
),
endsnippet

snippet futureBldr "Creates a Future Builder. This builds itself based on the latest snapshot of interaction with a Future."
FutureBuilder(
	future: ${1:Future},
	initialData: ${2:InitialData},
	builder: (BuildContext context, AsyncSnapshot snapshot) {
		return ${3:};
	},
),
endsnippet

snippet nosm "This method is invoked when a non-existent method or property is accessed."
@override
dynamic noSuchMethod(Invocation invocation) {
	${1:}
}
endsnippet

snippet inheritedW "Class used to propagate information down the widget tree"
class ${1:Name} extends InheritedWidget {
	${1:Name}({Key key, this.child}) : super(key: key, child: child);

	final Widget child;

	static ${1:Name} of(BuildContext context) {
		return (context.inheritFromWidgetOfExactType(${1:Name})as ${1:Name});
	}

	@override
	bool updateShouldNotify( ${1:Name} oldWidget) {
		return ${2:true};
	}
}
endsnippet

snippet mounted "Whether this State object is currently in a tree."
@override
bool get mounted {
	${0:}
}
endsnippet

snippet snk "A Sink is the input of a stream."
Sink<${1:type}> get ${2:name} => _${2:name}Controller.sink;
final _${2:name}Controller = StreamController<${1:type}>();
endsnippet

snippet strm "A source of asynchronous data events. A stream can be of any data type <T>"
Stream<${1:type}> get ${2:name} => _${2:name}Controller.stream;
final _${2:name}Controller = StreamController<${1:type}>();
endsnippet

snippet subj "A BehaviorSubject is also a broadcast StreamController which returns an Observable rather than a Stream."
Stream<${1:type}> get ${2:name} => _${2:name}Subject.stream;
final _${2:name}Subject = BehaviorSubject<${1:type}>();
endsnippet

snippet toStr "Returns a string representation of this object."
@override
String toString() {
	return ${1:toString};
}
endsnippet

snippet debugP "Prints a message to the console, which you can access using the flutter tool's `logs` command (flutter logs)."
debugPrint(${1:statement});
endsnippet

snippet importM "Import flutter material package"
import 'package:flutter/material.dart';
endsnippet

snippet importC "Import Flutter Cupertino package"
import 'package:flutter/cupertino.dart';
endsnippet

snippet importFT "Import flutter_test package"
import 'package:flutter_test/flutter_test.dart';
endsnippet

snippet mateapp "Create a MaterialApp"
import 'package:flutter/material.dart';
 
void main() => runApp(MyApp());
 
class MyApp extends StatelessWidget {
	@override
	Widget build(BuildContext context) {
		return MaterialApp(
			title: 'Material App',
			home: Scaffold(
				appBar: AppBar(
					title: Text('Material App Bar'),
				),
				body: Center(
					child: Container(
						child: Text('Hello World'),
					),
				),
			),
		);
	}
}
endsnippet

snippet cupeapp "Cupertino App"
import 'package:flutter/cupertino.dart';
 
void main() => runApp(MyApp());
 
class MyApp extends StatelessWidget {
	@override
	Widget build(BuildContext context) {
		return CupertinoApp(
			title: 'Cupertino App',
			home: CupertinoPageScaffold(
				navigationBar: CupertinoNavigationBar(
					middle: Text('Cupertino App Bar'),
				),
				child: Center(
					child: Container(
						child: Text('Hello World'),
					),
				),
			),
		);
	}
}
endsnippet

snippet tweenAnimationBuilder "Widget builder that animates a property of a Widget to a target value whenever the target value changes."
TweenAnimationBuilder(
	duration: ${1:const Duration(),}
	tween: ${2:Tween(),}
	builder: (BuildContext context, ${3:dynamic} value, Widget child) {
		return ${4:Container();}
	},
),  
endsnippet

snippet valueListenableBuilder "Given a ValueListenable<T> and a builder which builds widgets from concrete values of T, this class will automatically register itself as a listener of the ValueListenable and call the builder with updated values when the value changes."
ValueListenableBuilder(
	valueListenable: ${1: null},
	builder: (BuildContext context, ${2:dynamic} value, Widget child) {
		return ${3: Container();}
	},
),
endsnippet

snippet testFile "unit test file"
import 'package:flutter_test/flutter_test.dart';

void main() {
	group('${1:group description}',(){
			test(
				'${2:GIVEN x}'
				' ${3:WHEN y}'
				' ${4:AND z}'
				' ${5:THEN result}',
				() {
			${6:}
		});
	});
}
endsnippet

snippet testWidgetsFile "widget test file"
import 'package:flutter_test/flutter_test.dart';

void main() {
	testWidgets( ${1:test description}', (WidgetTester tester) async {
		${2:}
	});
}
endsnippet

snippet testFunc "Create a test function"
test( '${1:test description}',() {
	${2:}
});
endsnippet

snippet testWidgetsFunc "Create a testWidgets function"
testWidgets( ${1:test description}', (WidgetTester tester) async {
	${2:}
});
endsnippet

snippet mock "create mockito class"
class Mocked$1 extends Mock implements $1 {}
endsnippet






snippet built "built value class generator"
abstract class ${1:CLASS_NAME} implements Built<$1, $1Builder> {
	factory $1([updates($1Builder b)]) = _$$1;
	$1._();

	$0

	static Serializer<$1> get serializer => _$${1/.*/\l$0/}Serializer;
}
endsnippet

snippet ipbuilt "import built value deps"
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part '${1:`!v expand('%:t:r')`.g.dart}';
endsnippet

snippet jsbuilt "create JsonSerializable class"
import 'package:json_annotation/json_annotation.dart';

part '${1:`!v expand('%:t:r')`.g.dart}';

@JsonSerializable()
class ${1:CLASS_NAME} {

factory $1.fromJson(Map<String, dynamic> json) =>
	_$$1FromJson(json);

Map<String, dynamic> toJson() => _$$1ToJson(this);
}
endsnippet

snippet trl "translation string"
String get $1 {
	return Intl.message(
		'$2',
		name: '$1',
		desc: '$0',
	);
}
endsnippet

snippet al "app localizations"
AppLocalizations.of(context).
endsnippet

snippet mt "main theme"
MainTheme.of(context).
endsnippet

snippet ath "appTheme"
final appTheme = Provider.of<AppTheme>(context);
endsnippet

snippet rel "remote localizations"
final localizations = RemoteLocalizations.of(context);
endsnippet

