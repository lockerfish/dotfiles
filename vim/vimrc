" vimrc
" Hendrix Tavarez
" @2012
"
"==============================================================
" General settings
"--------------------------------------------------------------

"must be called before filetype plugin on ident on
call pathogen#infect()
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

filetype plugin on
filetype indent on

colorscheme molokai

"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

set history=700 " Sets how many lines of history VIM has to remember
set autoread " Set to auto read when a file is changed from the outside
set so=7 " Set 7 lines to the cursors - when moving vertical..
set wildmenu "Turn on WiLd menu
set wildchar=<Tab>
set ruler "Always show current position
set cmdheight=2 "The commandbar height
set hid "Change buffer - without saving
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
set ignorecase "Ignore case when searching
set smartcase
set hlsearch "Highlight search things
set incsearch "Make search act like search in modern browsers
set nolazyredraw "Don't redraw while executing macros 
set magic "Set magic on, for regular expressions
set showmatch "Show matching bracets when text indicator is over them
set mat=2 "How many tenths of a second to blink
set noerrorbells
set novisualbell
set t_vb=
set tm=500
set number
set hidden
"set t_Co=256
set ts=4 sts=4 sw=4 noexpandtab
set listchars=tab:▸\ ,eol:¬ " Use the same symbols as TextMate for tabstops and EOLs
"set path+=., " set gf (go to file) and gc (go to class)
"set path+=~/workspace/WASX/eclipse/grid.pgc.common/src/**,
"set path+=~/workspace/WASX/eclipse/grid.pgc.runtime/src/**,
"set path+=~/workspace/WASX/eclipse/grid.pgc.samples/src/**,
"set path+=~/workspace/WASX/eclipse/grid.pgc.was/src/**,

" With a map leader it's possible to do extra key combinations
let mapleader = ","
let g:mapleader = ","

let s:default_path = escape(&path, '\ ') " store default value of path

" mapping keys
map gf <C-W>f
map gc gdb<C-W>f


" mapping <leader> key
map <leader>e :e! ~/.vim/vimrc<cr> " Fast editing of the .vimrc
map <leader>es :sp %%
map <leader>et :tabe %%
map <leader>ev :vsp %%
map <leader>ew :e %%

nmap <leader>q :q<cr>
nmap <leader>l :set list!<CR> " Shortcut to rapidly toggle `set list`
nmap <leader>w :w!<cr> " Fast saving
nmap <leader>cd :cd %:p:h<CR> " change directory to the file being edited
nmap <leader>nt :NERDTree<CR> " NERD Tree directory browser plugin
nmap <leader>tl :TlistToggle<CR> " Tag List source browser plugin
nmap <leader>mt <C-W>T " move window to new tab
nmap <leader>mru :MRU<CR> " Most Recent files plugin


" mapping <Alt>

nmap <A-[> <<
nmap <A-]> >>

vmap <A-[> <gv
vmap <A-]> >gv


" mapping <Ctl>
map <C-[> <Esc>
map <C-]> <C-W><C-]>:ts<CR>
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <c-t> :tabnew<cr>
map <C-tab> :tabnext<cr>

imap <C-t> <esc>:tabnew<cr>i
imap <C-tab> <esc>:tabnext<cr>i

" mapping <Ctl-Shift>
map <c-s-tab> :tabprevious<cr>

imap <c-s-tab> <esc>:tabprevious<cr>i

noremap <F5> :make<CR>
cnoremap %% <C-R>=expand('%:h').'/'<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if has("autocmd")
	" Enable file type detection
	filetype on

	" Syntax of these languages is fussy over tabs Vs spaces
	autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
	autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

	" Customisations based on house-style (arbitrary)
	autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
	autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
	autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab
	autocmd FileType java setlocal ts=4 sts=4 sw=4 noexpandtab
	autocmd FileType java set tags=~/.java-ctags
	autocmd FileType java set makeprg=mvn\ clean\ package\ %

	autocmd BufRead *.java set include=^#\s*import 
	autocmd BufRead *.java set includeexpr=substitute(v:fname,'\\.','/','g')
	"autocmd FileType java set efm=\ %#[javac]\ %#%f:%l:%c:%*\\d:%*\\d:\ %t%[%^:]%#:%m,\%A\ %#[javac]\ %f:%l:\ %m,%-Z\ %#[javac]\ %p^,%-C%.%#
	"autocmd BufRead,BufNewFile **/WASX/**.java set makeprg=mantis\ -lib\ \"/opt/IBM/WebSphere8.5yy/AppServer/plugins/com.ibm.ws.batch.runtime.jar\"
	autocmd BufNewFile,BufRead *.rss setfiletype xml " Treat .rss files as XML
	autocmd BufWritePost .vimrc source $MYVIMRC " auto source vimrc when save
	autocmd! BufWritePost vimrc source ~/.vim/vimrc " When vimrc is edited, reload it
	autocmd BufWritePre *.py,*.js,*.java :call <SID>StripTrailingWhitespaces() " clean trailing whitespaces on save
	autocmd BufRead * let s:tempPath=escape(escape(expand("%:p:h"), ' '), '\ ') | exec "set path-=".s:tempPath | exec "set path-=".s:default_path | exec "set path^=".s:tempPath | exec "set path^=".s:default_path
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! <SID>StripTrailingWhitespaces()
" Preparation: save last search, and cursor position.
	let _s=@/
	let l = line(".")
	let c = col(".")
	" Do the business:
	%s/\s\+$//e
	" Clean up: restore previous search history, and cursor position
	let @/=_s
	call cursor(l, c)
endfunction


